// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "pvz-service/internal/model"

	uuid "github.com/google/uuid"
)

// ReceptionService is an autogenerated mock type for the ReceptionService type
type ReceptionService struct {
	mock.Mock
}

// CloseReception provides a mock function with given fields: ctx, pvzID
func (_m *ReceptionService) CloseReception(ctx context.Context, pvzID uuid.UUID) (*model.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseReception")
	}

	var r0 *model.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReception provides a mock function with given fields: ctx, pvzID
func (_m *ReceptionService) CreateReception(ctx context.Context, pvzID uuid.UUID) (*model.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 *model.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceptionService creates a new instance of ReceptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionService {
	mock := &ReceptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
