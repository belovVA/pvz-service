package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "pvz-service/internal/model"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddNewPvz provides a mock function with given fields: ctx, city
func (_m *Service) AddNewPvz(ctx context.Context, city string) (*model.Pvz, error) {
	return nil, nil
}

// AddProduct provides a mock function with given fields: ctx, typeProduct, pvzID
func (_m *Service) AddProduct(ctx context.Context, typeProduct string, pvzID uuid.UUID) (*model.Product, error) {
	return nil, nil
}

// Authenticate provides a mock function with given fields: ctx, user
func (_m *Service) Authenticate(ctx context.Context, user model.User) (string, error) {
	return "", nil
}

// CloseReception provides a mock function with given fields: ctx, pvzID
func (_m *Service) CloseReception(ctx context.Context, pvzID uuid.UUID) (*model.Reception, error) {
	return nil, nil
}

// CreateReception provides a mock function with given fields: ctx, pvzID
func (_m *Service) CreateReception(ctx context.Context, pvzID uuid.UUID) (*model.Reception, error) {
	return nil, nil

}

// DeleteProduct provides a mock function with given fields: ctx, pvzID
func (_m *Service) DeleteProduct(ctx context.Context, pvzID uuid.UUID) error {
	return nil

}

// DummyAuth provides a mock function with given fields: ctx, role
func (_m *Service) DummyAuth(ctx context.Context, role string) (string, error) {
	return "", nil

}

// GetInfoPvz provides a mock function with given fields: ctx, query
func (_m *Service) GetInfoPvz(ctx context.Context, query *model.PvzInfoQuery) ([]*model.Pvz, error) {
	return nil, nil
}

// Registration provides a mock function with given fields: ctx, user
func (_m *Service) Registration(ctx context.Context, user model.User) (*model.User, error) {
	return nil, nil

}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
