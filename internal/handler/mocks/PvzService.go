// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "pvz-service/internal/model"
)

// PvzService is an autogenerated mock type for the PvzService type
type PvzService struct {
	mock.Mock
}

// AddNewPvz provides a mock function with given fields: ctx, city
func (_m *PvzService) AddNewPvz(ctx context.Context, city string) (*model.Pvz, error) {
	ret := _m.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for AddNewPvz")
	}

	var r0 *model.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Pvz, error)); ok {
		return rf(ctx, city)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Pvz); ok {
		r0 = rf(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPvzService creates a new instance of PvzService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPvzService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PvzService {
	mock := &PvzService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
